import re
import asyncio
import json
import os
import calendar
from datetime import datetime
from num2words import num2words
from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from docling_qa import ask_ai_from_pdf
from docling_qa2 import ask_ai_from_pdf2
from docx_replacer import fill_doc
from parse_pko_new_version import parse_contract_data_from_pdf, parse_active_total
from datetime import datetime
import unicodedata





bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class FileInfo(StatesGroup):
    user_text = State()
    file_path = State()
    reason = State()
    MFO = State()
    mfo = State()
    attached_documents = State()

class BatchProcess(StatesGroup):
    file_path = State()
    user_text = State()
    mfo_list = State()
    reason = State()
    attached_documents = State()
    

def clean(name: str) -> str:
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã Unicode (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "Cf" ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–µ)
    name = ''.join(ch for ch in name if unicodedata.category(ch) != 'Cf')
    # –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—ã, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    return re.sub(r"[ \t\u00A0]+", "", name).strip().lower()


def get_current_date_str():
    return datetime.now().strftime("%d.%m.%Y")


def get_term_by_amount(amount_str):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –≤–∞–ª—é—Ç—ã, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits_only = ''.join(filter(str.isdigit, amount_str))
    
    if not digits_only:
        return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞"

    amount = int(digits_only)

    if amount < 100_000:
        return "–æ—Ç 3 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤"
    elif amount < 150_000:
        return "–æ—Ç 6 –¥–æ 12 –º–µ—Å—è—Ü–µ–≤"
    else:
        return "–æ—Ç 12 –¥–æ 24 –º–µ—Å—è—Ü–µ–≤"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ JSON
def load_companies_db():
    try:
        with open("companies_db.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        print("–§–∞–π–ª companies_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON.")
        return []

def normalize_string(s):
    return re.sub(r'\s+', '', s).lower()  # —É–¥–∞–ª—è–µ—Ç –í–°–ï –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

def find_company_by_trade_name(trade_name):
    normalized_trade_name = normalize_string(trade_name)
    companies_data = load_companies_db()
    for company in companies_data:
        if normalize_string(company["trade_name"]) == normalized_trade_name:
            return company
    return None

def pluralize(value, one, few, many):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
    if 11 <= value % 100 <= 14:
        return many
    elif value % 10 == 1:
        return one
    elif 2 <= value % 10 <= 4:
        return few
    else:
        return many

def calculate_date_diff(start_date_str, end_date_str):
    start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
    end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
    
    if end_date < start_date:
        return "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π"

    years = end_date.year - start_date.year
    months = end_date.month - start_date.month
    days = end_date.day - start_date.day

    if days < 0:
        months -= 1
        prev_month = end_date.month - 1 if end_date.month > 1 else 12
        prev_year = end_date.year if end_date.month > 1 else end_date.year - 1
        days_in_prev_month = calendar.monthrange(prev_year, prev_month)[1]
        days += days_in_prev_month

    if months < 0:
        years -= 1
        months += 12

    result = []
    if years > 0:
        result.append(f"{years} {pluralize(years, '–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç')}")
    if months > 0:
        result.append(f"{months} {pluralize(months, '–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤')}")
    if days > 0:
        result.append(f"{days} {pluralize(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}")

    return " –∏ ".join(result) if result else "–º–µ–Ω–µ–µ –¥–Ω—è"





@dp.message(Command("batch"))
async def cmd_batch(message: Message, state: FSMContext):
    await state.set_state(BatchProcess.file_path)
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º. (–ñ–∏—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)")

@dp.message(BatchProcess.file_path)
async def handle_pdf_with_text(message: Message, state: FSMContext):
    document = message.document

    if document.mime_type != "application/pdf":
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    if not message.caption or not message.caption.strip():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ PDF-—Ñ–∞–π–ª—É.")
        return

    file_path = f"temp/{message.from_user.id}_{document.file_name}"
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    await state.update_data(user_text=message.caption.strip(), file_path=file_path)
    await state.set_state(BatchProcess.mfo_list)
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")

@dp.message(BatchProcess.mfo_list)
async def handle_mfo_list(message: Message, state: FSMContext):
    raw_mfos = message.text.splitlines()
    mfo_names = [clean(name) for name in raw_mfos if clean(name)]

    await state.update_data(mfo_names=mfo_names)
    await state.set_state(BatchProcess.reason)
    data = await state.get_data()

    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É. –ü—Ä–∏–º–µ—Ä:")
    await message.answer(f"""–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –º–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ—Ö–≤–∞—Ç–∫–æ–π –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –¢–∞–∫–∂–µ –∏–º–µ—é –≤—ã—Å–æ–∫—É—é –¥–æ–ª–≥–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É –≤–≤–∏–¥—É –Ω–∞–ª–∏—á–∏—è {parse_active_total(data["file_path"])} –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –≤ –º–∏–∫—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –±–∞–Ω–∫–∞—Ö –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è, —ç—Ç–æ –≤–∏–¥–Ω–æ –ø–æ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ö—Ä–µ–¥–∏—Ç–Ω–æ–º—É –û—Ç—á–µ—Ç—É. –Ø–≤–ª—è—é—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –ê–°–ü.""")

@dp.message(BatchProcess.reason)
async def handle_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(BatchProcess.attached_documents)
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ü—Ä–∏–ª–∞–≥–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:")
    await message.answer("""
1)	–ü–ö–û - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –û—Ç—á–µ—Ç
2)	–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
3)	–°–ø—Ä–∞–≤–∫–∞ –ï–ù–ü–§
4)	–í—ã–ø–∏—Å–∫–∞
5)	–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏
6)	–°–ø—Ä–∞–≤–∫–∞ –æ —Å–æ—Ü. –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è—Ö
""")

@dp.message(BatchProcess.attached_documents)
async def handle_attached_documents(message: Message, state: FSMContext):
    await state.update_data(attached_documents=message.text)
    data = await state.get_data()
    await state.clear()

    file_path = data["file_path"]
    user_text = data["user_text"]
    mfo_names = data["mfo_names"]
    reason = data["reason"]
    attached_documents = data["attached_documents"]

    status_msg = await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    # try:

    response = ask_ai_from_pdf2(file_path, user_text)
    user_data = json.loads(response)

    for mfo_name in mfo_names:
        company = find_company_by_trade_name(mfo_name)
        if not company:
            await message.answer(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {mfo_name}")
            continue

        result = parse_contract_data_from_pdf(file_path, company_name=company["search_field"])
        if not result:
            await message.answer(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∫–æ –¥–ª—è: {mfo_name}")
            continue

        credit_total = re.sub(r'\s*KZT$', '', result["–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"])
        credit_total_no_cents = re.sub(r'\.\d+$', '', credit_total)
        credit_total_int = int(credit_total_no_cents.replace(" ", ""))
        credit_total_words = num2words(credit_total_int, lang='ru')
        result["–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"] = f"{credit_total_no_cents} ({credit_total_words})"

        credit_str = re.sub(r'\s*KZT$', '', result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"])
        overdue_str = re.sub(r'\s*KZT$', '', result["–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤"])
        credit_val = float(credit_str.replace(" ", ""))
        overdue_val = float(overdue_str.replace(" ", ""))
        chosen_str = credit_str if credit_val >= overdue_val else overdue_str
        chosen_str_no_cents = re.sub(r'\.\d+$', '', chosen_str)
        chosen_int = int(chosen_str_no_cents.replace(" ", ""))
        chosen_words = num2words(chosen_int, lang='ru')

        result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"] = f"{chosen_str_no_cents} ({chosen_words})"
        result["–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤"] = re.sub(r'\.\d+$', '', overdue_str)

        date_diff = calculate_date_diff(result["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"], result["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"])

        replacements = {
            "fullName": user_data["fullName"],
            "IIN": result["–ò–ò–ù"],
            "address": user_data["address"],
            "phone": user_data["phone"],
            "email": user_data["email"],
            "receiver": company["details"]["to"],
            "mfoAddress": company["details"]["address"],
            "bin": company["details"]["bin"],
            "mfoEmail": company["details"]["email"],
            "contract_number": result["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"],
            "contract_start_date": result["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"],
            "contract_amount": result["–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"],
            "outstanding_amount": result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"],
            "shortName": user_data["shortName"],
            "date_diff": date_diff,
            "reason": reason,
            "attached_documents": attached_documents,
            "date_now": get_current_date_str(),
            "term": get_term_by_amount(result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"])
        }

        doc_name = result.get("–ò–ò–ù", "") + "_" + mfo_name + ".docx"
        doc_path = f"temp/{doc_name}"
        filename = mfo_name + " " + "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä" + " " + user_data["shortName"] + ".docx"

        fill_doc("template.docx", doc_path, replacements)

        result_file = FSInputFile(doc_path, filename=filename)
        await message.answer_document(result_file, caption=f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è: {mfo_name}")
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    

    await status_msg.delete()
    # except Exception as e:
    #     await status_msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
























# ---------------------------------------------------------
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–≤ –ø–æ–¥–ø–∏—Å–∏).")


@dp.message(F.document)
async def handle_pdf_with_text(message: Message, state: FSMContext):
    document = message.document

    if document.mime_type != "application/pdf":
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    if not message.caption or not message.caption.strip():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ PDF-—Ñ–∞–π–ª—É.")
        return

    user_text = message.caption.strip()
    file_path = f"temp/{message.from_user.id}{document.file_name}"
    file = await bot.get_file(document.file_id)
    try:
        await bot.download_file(file.file_path, destination=file_path)
        await state.update_data(user_text=user_text, file_path=file_path)
        await state.set_state(FileInfo.MFO)
        await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return
    
@dp.message(FileInfo.MFO)
async def handle_mfo(message: Message, state: FSMContext):
    # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ
    company = find_company_by_trade_name(message.text)
    if company is None:
        await message.answer("‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º —Ç–æ—Ä–≥–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
        await state.clear()
        return
    # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await state.update_data(MFO=company)
    await state.update_data(mfo=message.text)
    await state.set_state(FileInfo.reason)
    data = await state.get_data()

    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É. –ü—Ä–∏–º–µ—Ä:")
    await message.answer(f"""–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –º–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ—Ö–≤–∞—Ç–∫–æ–π –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –¢–∞–∫–∂–µ –∏–º–µ—é –≤—ã—Å–æ–∫—É—é –¥–æ–ª–≥–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É –≤–≤–∏–¥—É –Ω–∞–ª–∏—á–∏—è {parse_active_total(data["file_path"])} –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –≤ –º–∏–∫—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –±–∞–Ω–∫–∞—Ö –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è, —ç—Ç–æ –≤–∏–¥–Ω–æ –ø–æ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ö—Ä–µ–¥–∏—Ç–Ω–æ–º—É –û—Ç—á–µ—Ç—É. –Ø–≤–ª—è—é—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –ê–°–ü.""")


@dp.message(FileInfo.reason)
async def handle_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(FileInfo.attached_documents)
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ü—Ä–∏–ª–∞–≥–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:")
    await message.answer("""
1)	–ü–ö–û - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –û—Ç—á–µ—Ç
2)	–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
3)	–°–ø—Ä–∞–≤–∫–∞ –ï–ù–ü–§
4)	–í—ã–ø–∏—Å–∫–∞
5)	–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏
6)	–°–ø—Ä–∞–≤–∫–∞ –æ —Å–æ—Ü. –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è—Ö
""")
    

@dp.message(FileInfo.attached_documents)
async def handle_attached_documents(message: Message, state: FSMContext):
    await state.update_data(attached_documents=message.text)
    data = await state.get_data()
    await state.clear()

    status_msg = await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é PDF-—Ñ–∞–π–ª...")

    file_path = data["file_path"]
    user_text = data["user_text"]
    mfo = data["MFO"]

    try:
        await status_msg.edit_text("üîç –ò—â—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ PDF-—Ñ–∞–π–ª–µ...")
        result = parse_contract_data_from_pdf(file_path, company_name=mfo["search_field"])

        if result is None:
            await status_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {mfo['details']['to']}")
            return



        await status_msg.edit_text("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥...")
        response = ask_ai_from_pdf2(file_path, user_text)
        user_data = json.loads(response)

        await status_msg.edit_text("üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞...")
        credit_total = re.sub(r'\s*KZT$', '', result["–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"])
        credit_total_no_cents = re.sub(r'\.\d+$', '', credit_total)
        credit_total_int = int(credit_total_no_cents.replace(" ", ""))
        credit_total_words = num2words(credit_total_int, lang='ru')
        result["–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"] = f"{credit_total_no_cents} ({credit_total_words})"

        credit_str = re.sub(r'\s*KZT$', '', result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"])
        overdue_str = re.sub(r'\s*KZT$', '', result["–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤"])

        credit_val = float(credit_str.replace(" ", ""))
        overdue_val = float(overdue_str.replace(" ", ""))
        chosen_str = credit_str if credit_val >= overdue_val else overdue_str
        chosen_str_no_cents = re.sub(r'\.\d+$', '', chosen_str)
        chosen_int = int(chosen_str_no_cents.replace(" ", ""))
        chosen_words = num2words(chosen_int, lang='ru')

        result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"] = f"{chosen_str_no_cents} ({chosen_words})"
        result["–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤"] = re.sub(r'\.\d+$', '', overdue_str)

        await status_msg.edit_text("üìÜ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞...")
        date_diff = calculate_date_diff(result["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"], result["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"])

        replacements = {
            "fullName": user_data["fullName"],
            "IIN": result["–ò–ò–ù"],
            "address": user_data["address"],
            "phone": user_data["phone"],
            "email": user_data["email"],
            "receiver": mfo["details"]["to"],
            "mfoAddress": mfo["details"]["address"],
            "bin": mfo["details"]["bin"],
            "mfoEmail": mfo["details"]["email"],
            "contract_number": result["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"],
            "contract_start_date": result["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"],
            "contract_amount": result["–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"],
            "outstanding_amount": result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"],
            "shortName": user_data["shortName"],
            "date_diff": date_diff,
            "reason": data["reason"],
            "attached_documents": data["attached_documents"],
            "date_now": get_current_date_str(),
            "term": get_term_by_amount(result["–ù–µ–ø–æ–≥–∞—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"])
        }

        await status_msg.edit_text("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        docName = result.get("–ò–ò–ù", "") + ".docx"
        doc_path = f"temp/{docName}"
        fill_doc("template.docx", doc_path, replacements)

        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...")
        filename = data["MFO"]["trade_name"] + " " + "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä" + " " + user_data["shortName"] + ".docx"
        result_file = FSInputFile(doc_path, filename=filename)
        await message.answer_document(result_file, caption="‚úÖ –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
        await status_msg.delete()

    except Exception as e:
        await status_msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")













    
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())